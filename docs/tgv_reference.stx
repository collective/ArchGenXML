Class tagged values

  The following tagged values can be set on classes to alter their behaviour:

archetype_name -- The name which will be shown in the "add new item" drop-down and other user-interface elements. Defaults to the class name, but whilst the class name must be valid and unique python identifier, the archetype_name can be any string.

content_icon -- The name of an image file, which must be found in the skins directory of the product. This will be used to represent the content type in the user interface.

typeDescription -- A description of the type, a sentence or two in length. Used to describe the type to the user.

base_class -- Explicitly set the base class of a content type, overriding the automatic selection of BaseContent, BaseFolder or OrderedBaseFolder as well as any parent classes in the model. See also additional_parents.

base_schema -- Explicitly set the base schema for a content type, overriding the automatic selection of the parent's schema or BaseSchema, BaseFolderSchema or OrderedBaseFolderSchema. 

import_from -- If you wish to include a class in your model (as a base class or aggregated class, for example) which is actually defined in another product, add the class to your model and set the import_from tagged value to the class that should be imported in its place. The class will not be generated, but will act as a proxy for the real class.

additional_parents -- A comma-separated list of the names of classes which should be used as additional parents to this class, in addition to the Archetypes BaseContent, BaseFolder or OrderedBaseFolder. Usually used in conjunction with 'imports' to import the class before it is referenced.

imports -- A list of python import statements which will be placed at the top of the generated file. Use this to make new field and widget types available, for example. Note that in the generated code you will be able to enter additional import statements in a preserved code section near the top of the file. Prefer using the imports tagged value when it imports something that is directly used by another element in your model. You can have several import statements, one per line, or by adding several tagged values with the name 'imports'.

allow_discussion -- Whether or not the content type should be discussable in the portal by default.

filter_content_types -- If set to true (1), explicitly turn on the filter_content_types factory type information value. If this is off, all globally addable content types will be addable inside a (folderish) type; if it is on, only those values in the allowed_content_types list will be enabled. Note that when aggregation or composition is used to define containment, filtered_content_types will be automatically turned on.

allowed_content_types -- A comma-separated list of allowed sub-types for a (folderish) content type. Note that allowed content types are automatically set when using aggregation and composition between classes to specify containment.

inherit_allowed_types -- By default, a child type will inherit the allowable
content types from its parents. Set this property to false (0) to turn this off.

class_header -- An arbitrary string which is injected into the header section of the class, before any methods are defined.

default_actions -- If set to true (1), generate explicitly the default 'view' and 'edit' actions. Usually, these are inherited from the Archetypes base classes, but if you have a funny base class, this may be necessary.

hide_actions -- A comma- or newline-separated list of action ids to hide on the class. For example, set to 'metadata, sharing' to turn off the metadata (properties) and sharing tabs.

immediate_view -- Set the immediate_view factory type information value. This should be the name of a page template, and defaults to 'base_view'. Note that Plone at this time does not make use of immediate_view, which in CMF core allows you to specify a different template to be used when an object is first created from when it is subsequently accessed.

default_view -- The TemplateMixin class in Archetypes allows your class to present several alternative view templates for a content type. The default_view value sets the default one. Defaults to 'base_view'. Only relevant if you use TemplateMixin.

folderish -- Explicitly specify that a class is folderish. It is usually better to the the '<<folder>>' stereotype instead.

marshall, marshaller -- Specify a marshaller to use for the class' schema.

Tool tagged values

  The following tagged values can be set on classes with the '<<portal_tool>>' stereotype to alter their behaviour:

toolicon -- The name of an image file, which must be found in the skins directory of the product. This will be used to represent your tool in the Zope Management Interface.

tool_instance_name -- The id to use for the tool. Defaults to 'portal_<name>', where &lt;name&gt; is the class name in lowercase.

autoinstall -- Set to true (1) to automatically install the tool when your product is installed.

configlet -- Set to true (1) to set up a configlet in the Plone control panel for your tool. 

configlet:view -- The id of the view template to use when first opening the configlet. By default, the 'view' action of the object is used (which is usually base_view)

configlet:title -- The name of the configlet.

configlet:description -- A description of the configlet.

configlet:condition -- A TALES expresson defining a condition which will be evaluated to determine whether the configlet should be displayed.

configlet:permission -- A permission which is required for the configlet to be displayed.

configlet:section -- The section of the control panel where the configlet should be displayed. One of 'Plone', 'Products' (default) or 'Members'.

configlet:icon -- The name of an image file, which must be in your product's skin directory, used as the configlet icon.

Method tagged values

  The following tagged values can be set on methods to alter their behaviour:

code -- The actual python code of the method. Only use this for simple one-liners. Code filled into the generated file will be preserved when the model is re-generated.

permission -- For method with public visibility only, if a permission is set, declare the method to be protected by this permission. Methods with private or protected visiblity are always declared private since they are not intended for through-the-web unsafe code to access. Methods with package visibility use the class default security and do not get security declarations at all.

Action tagged values

  For methods with either of the '<<action>>'', '<<form>>' or '<<view>>' stereotypes, the following tagged values can be used to control the generated actions:

id -- The id of the action. Use 'id', 

label -- The label of the action - displayed to the user.

condition -- A TALES expresson defining a condition which will be evaluated to determine whether the action should be displayed.

category -- The category for the action. Defaults to 'object'.

Portlet tagged values

  For methods with the '<<portlet>>' or '<<portlet_view>>' stereotypes, the following tagged values can be used:

autoinstall -- Set to 'left' or 'right' to automatically install the portlet with the product in the left or right slots, respectively.

view -- Set the name of the portlet. Defaults to the method name. This will be used as the name of the auto-created page template for the portlet.

Schema tagged values

  Tagged values on attributes are passed straight through to the Archetypes schema as field attributes. Therefore, you should consult the Archetypes documentation to find out which values you can set on each field. Some of the more common ones are:
  
required -- Set to true (1) to make the field required

default -- Set a value to use as the default value of the field.

default_method -- Set the name of a method on the object which will be called to determine the default value of the field.

vocabulary -- Set to a python list, a DisplayList or a method name (quoted) which provides the vocabulary for a selection widget.

enforceVocabulary -- Set to true (1) to ensure that only items from the vocabulary are permitted.

multiValued -- Certain fields, such as reference fields, can optionally accept morethan one value if multiValued is set to true (1)

accessor -- Set the name of the accessor (getter) method. If you are overriding one of the DC metadata fields such as 'title' or 'description' be sure to set the correct accessor names such as 'Title' and 'Description'; by default these accessors would be generated as getTitle() or getDescription().

mutator -- Similarly, set the name of the mutator (setter) method.

searchable -- Whether or not the field should be searchable when performing a search in the portal. 

Widget tagged values

  Similarly, tagged values with the prefix 'widget:' will be passed through as widget parameters. Consult the Archetypes documentation for details. The most common widget parameters are:
  
widget:type -- Set the name of the widget to use. Each field has an associated default widget, but if you need a different one (e.g. a SelectionWidget for a string field), use this value to override.

widget:label -- Set the widget's label

widget:description -- Set the widget's description

widget:label_msgid -- Set the label i18n message id. Defaults to a name generated from the field name.

widget:description_msgid --  Set the description i18n message id. Defaults to a name generated from the field name.

widget:i18n_domain -- Set the i18n domain. Defaults to the product name.

Other tagged values

  These tagged values have not yet been documented.

base_actions -- TODO: What is this for?

create_action -- TODO: Why is this here at all?

back_reference_field -- TODO: What is this?

reference_field -- TODO: What is this?

vocabulary:portal_type -- TODO: What is this?

addschema -- TOOD: What is this?