import os, sys
from Products.PloneTestCase import PloneTestCase

try:
    from Products.PloneTestCase.PloneTestCase import USELAYER
    from Products.PloneTestCase.layer import PloneSite
except:
    USELAYER = False
if __name__ == '__main__':
    execfile(os.path.join(sys.path[0], 'framework.py'))

<dtml-var "generator.getProtectedSection(parsed_class, 'module-header')">
#
# Test-cases for class(es) <dtml-var "', '.join([p.getName() for p in klass.getRealizationParents()])">
#

from Testing import ZopeTestCase
from Products.Five.testbrowser import Browser
<dtml-if "parent is not None">
from <dtml-var "parent.getQualifiedModuleName(None,forcePluginRoot=1)"> import <dtml-var "parent.getCleanName()">
<dtml-else>
from Products.PloneTestCase.PloneTestCase import PloneTestCase
</dtml-if>

# Import the tested classes
<dtml-in "klass.getRealizationParents() + klass.getClientDependencyClasses(includeParents=True)">
from <dtml-var "_['sequence-item'].getQualifiedModuleName(None, forcePluginRoot=1)"> import <dtml-var "_['sequence-item'].getCleanName()">
</dtml-in>


class <dtml-var "klass.getCleanName()"><dtml-if parent>(PloneTestCase.FunctionalTestCase,<dtml-var "parent.getCleanName()">)<dtml-else>(PloneTestCase.FunctionalTestCase)</dtml-if>:
<dtml-if "parsed_class and parsed_class.getDocumentation()">    """<dtml-var "parsed_class.getDocumentation()">"""
<dtml-else>    """Test-cases for class(es) <dtml-var "', '.join([p.getName() for p in klass.getRealizationParents()])">."""
</dtml-if>

<dtml-var "generator.getProtectedSection(parsed_class, 'class-header_'+klass.getCleanName(), 1)">
<dtml-if "not parsed_class or 'afterSetUp' not in parsed_class.methods.keys()">
    def afterSetUp(self):
        """
        """
        PloneTestCase.FunctionalTestCase.afterSetUp(self)
        <dtml-if parent><dtml-var "parent.getCleanName()">.afterSetUp(self)<dtml-else>pass</dtml-if>
        
        self.browser = Browser()
        
<dtml-else>
<dtml-var "parsed_class.methods['afterSetUp'].getSrc()"></dtml-if>

<dtml-if "not parsed_class or 'getError' not in parsed_class.methods.keys()">
    def getError(self, error_index=0):
        """
        Error access utility method.
        
        Get the error msg as text, by default the last one.
        @param self The object pointer.
        @param error_index The index of the error of interest.  If not passed in, 
            an index of 0 is used.
        """
        error_log = self.portal.error_log
        try:
            id = error_log.getLogEntries()[0]['id']
        except IndexError:
            # no errors
            return ''
        else:
            return error_log.getLogEntryAsText(id)
</dtml-if>

<dtml-if "not parsed_class or 'printError' not in parsed_class.methods.keys()">
    def printError(self, error_index=0):
        """
        Error printing utility method.
        
        Prints an error. Useful for debugging sessions.  By default, the
        last error is printed.
        
        @param self The object pointer.
        @param error_index The index of the error of interest.  If not passed in, 
             an index of 0 is used.
        """
        print '='*70
        print self.get_error(error_index)
        print '-'*70
</dtml-if>

<dtml-if "not parsed_class or 'Session' not in parsed_class.methods.keys()">
    class Session(dict):
        def set(self, key, value):
            self[key] = value

</dtml-if>

<dtml-if "not parsed_class or '_setup' not in parsed_class.methods.keys()">
    def _setup(self):
        PloneTestCase.FunctionalTestCase._setup(self)
        self.app.REQUEST['SESSION'] = self.Session()
</dtml-if>

    # Manually created methods
<dtml-if parsed_class>
<dtml-in "parsed_class.methods.values()">
<dtml-let allmethodnames="[m.testmethodName() for m in generator.getMethodsToGenerate(klass)[0]]">
<dtml-if "_['sequence-item'].getName() not in allmethodnames+['afterSetUp']">
<dtml-var "_['sequence-item'].getSrc()">
</dtml-if>
</dtml-let>
</dtml-in>
</dtml-if>


def test_suite():
    from unittest import TestSuite
    from Testing.ZopeTestCase.zopedoctest import ZopeDocFileSuite
    from Testing.ZopeTestCase import <dtml-if "klass.hasStereoType('functional_doc_testcase')">FunctionalDocFileSuite<dtml-else>ZopeDocFileSuite</dtml-if>

    <dtml-var "generator.getProtectedSection(parsed_class, 'test-suite-in-between')">

    s = <dtml-if "klass.hasStereoType('functional_doc_testcase')">FunctionalDocFileSuite<dtml-else>ZopeDocFileSuite</dtml-if>('<dtml-var "testname">.txt',
                         package='Products.<dtml-var "klass.getPackage().getProduct().getCleanName()">.doc',
                         test_class=<dtml-var "klass.getCleanName()">)
    if USELAYER:
        s.layer = PloneSite
    return TestSuite((s,
                      ))

<dtml-var "generator.getProtectedSection(parsed_class, 'module-footer')">
if __name__ == '__main__':
    framework()
